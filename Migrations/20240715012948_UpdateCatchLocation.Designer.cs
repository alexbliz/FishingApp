// <auto-generated />
using System;
using FishingApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FishingApp.Migrations
{
    [DbContext(typeof(FishingContext))]
    [Migration("20240715012948_UpdateCatchLocation")]
    partial class UpdateCatchLocation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FishingApp.Models.Catch", b =>
                {
                    b.Property<int>("CatchID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CatchID"));

                    b.Property<DateTime>("CatchDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Difficulty")
                        .HasColumnType("integer");

                    b.Property<int>("FishTypeID")
                        .HasColumnType("integer");

                    b.Property<int>("FishingMethodID")
                        .HasColumnType("integer");

                    b.Property<Point>("LocationPoint")
                        .HasColumnType("geometry");

                    b.Property<int>("UserID")
                        .HasColumnType("integer");

                    b.HasKey("CatchID");

                    b.HasIndex("FishTypeID");

                    b.HasIndex("FishingMethodID");

                    b.HasIndex("UserID");

                    b.ToTable("Catches", (string)null);
                });

            modelBuilder.Entity("FishingApp.Models.FishType", b =>
                {
                    b.Property<int>("FishTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FishTypeID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("FishTypeID");

                    b.ToTable("FishTypes", (string)null);
                });

            modelBuilder.Entity("FishingApp.Models.FishingMethod", b =>
                {
                    b.Property<int>("FishingMethodID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FishingMethodID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("FishingMethodID");

                    b.ToTable("FishingMethods", (string)null);
                });

            modelBuilder.Entity("FishingApp.Models.Location", b =>
                {
                    b.Property<int>("LocationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LocationID"));

                    b.Property<Polygon>("Area")
                        .HasColumnType("geometry");

                    b.Property<string>("LocationName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("WaterType")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("LocationID");

                    b.ToTable("Locations", (string)null);
                });

            modelBuilder.Entity("FishingApp.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserID"));

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("UserID");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("FishingApp.Models.Catch", b =>
                {
                    b.HasOne("FishingApp.Models.FishType", "FishType")
                        .WithMany("Catches")
                        .HasForeignKey("FishTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FishingApp.Models.FishingMethod", "FishingMethod")
                        .WithMany("Catches")
                        .HasForeignKey("FishingMethodID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FishingApp.Models.User", "User")
                        .WithMany("Catches")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FishType");

                    b.Navigation("FishingMethod");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FishingApp.Models.FishType", b =>
                {
                    b.Navigation("Catches");
                });

            modelBuilder.Entity("FishingApp.Models.FishingMethod", b =>
                {
                    b.Navigation("Catches");
                });

            modelBuilder.Entity("FishingApp.Models.User", b =>
                {
                    b.Navigation("Catches");
                });
#pragma warning restore 612, 618
        }
    }
}
